unit Controller.Student;

interface

uses Model.Student, uDM, SysUtils, Data.DB, FireDAC.Comp.Client, Vcl.Dialogs;

type
  TControllerStudend = class
  private

  public

    procedure Novo(mStudent: TStudent) overload;
    procedure Editar(mStudent: TStudent) overload;
  end;

implementation

{ TcontroladorCliente }



procedure TControllerStudend.Novo( mStudent: TStudent);
var
  Erro: string;
  Query: TFDQuery;
begin
  Query := TFDQuery.Create(nil);
  try
    if Trim(mStudent.Name) = '' then
    begin
      MessageDlg('Campo nome é obrigatório!', mtConfirmation, [mbOK], 0, mbOK);
      Abort;
    end;

    if Length(mStudent.Name) < 4 then
    begin
      MessageDlg('Nome deve ter no minimo 4 caractéres!', mtConfirmation, [mbOK], 0, mbOK);
      Abort;
    end;

    with Query do
    begin
      Connection := DM.con;
      Close;
      SQL.Add(' INSERT INTO STUDENT (        ');
      SQL.Add('     NAME,                    ');
      SQL.Add('     BIRTHDATE,               ');
      SQL.Add('     CLASS                    ');
      SQL.Add('      ) VALUES (              ');
      SQL.Add('       :NAME,                 ');
      SQL.Add('       :BIRTHDATE,            ');
      SQL.Add('       :CLASS                 ');
      SQL.Add(');                            ');
      ParamByName('NAME').AsString := mStudent.Name;
      ParamByName('BIRTHDATE').AsDate := mStudent.BirthDate;
      ParamByName('CLASS').AsString := mStudent.Class_;
    end;
    try
      Query.ExecSQL;
      MessageDlg('Gravado com sucesso!', mtConfirmation, [mbOK], 0, mbOK);
      except
      on E: Exception do
      begin
        Erro := 'Falha ao gravar aluno ';
        Erro := Erro + sLineBreak + E.Message;
        raise Exception.Create(Erro);
      end;
    end;
  finally
    FreeAndNil(Query);
  end;
end;

procedure TControllerStudend.Editar( mStudent: TStudent);
var
  Erro: string;
  Query: TFDQuery;
begin
  Query := TFDQuery.Create(nil);
  try
    if Trim(mStudent.Name) = '' then
    begin
      MessageDlg('Campo nome é obrigatório!', mtConfirmation, [mbOK], 0, mbOK);
      Abort;
    end;

    if Length(mStudent.Name) < 4 then
    begin
      MessageDlg('Nome deve ter no minimo 4 caractéres!', mtConfirmation, [mbOK], 0, mbOK);
      Abort;
    end;

    with Query do
    begin
      Connection := DM.con;
      Close;
      SQL.Add('  UPDATE STUDENT                   ');
      SQL.Add('     SET                           ');
      SQL.Add('     NAME = :NAME,                 ');
      SQL.Add('     BIRTHDATE = :BIRTHDATE,       ');
      SQL.Add('     CLASS = :CLASS,               ');
      SQL.Add('     ENABLED = :ENABLED            ');
      SQL.Add('     WHERE ID = :ID;               ');
      ParamByName('ID').AsInteger := mStudent.Id;
      ParamByName('BIRTHDATE').AsString := mStudent.Name;
      ParamByName('CLASS').AsString := mStudent.Class_;
      ParamByName('ENABLED').AsBoolean := mStudent.Enabled;
    end;
    try
      Query.ExecSQL;
      MessageDlg('Editado com sucesso!', mtConfirmation, [mbOK], 0, mbOK);
    except
        on E: Exception do
        begin
          Erro := 'Falha ao editar aluno ';
          Erro := Erro + sLineBreak + E.Message;
          raise Exception.Create(Erro);
        end;
    end;
  finally
    FreeAndNil(Query);
  end;
end;

end.
